{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clsno\\\\OneDrive\\\\Desktop\\\\Learn React\\\\Tic Tac Toe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  // Error: Different output when using map vs for when creating game board.\n  // Reproduce: Uncomment code with comment-lable \"for-loop-output\", take a turn in the game. Repeat for comment-label \"map-output\".\n  /* Expected behavior: Since the logic of creating the game board is identical using map vs for loops, I'd expect the pieces to\n        update naturally. When using the for loop, however, the game freezes and the React component (specifically, a certain <Square />)\n        whose 'value' prop should have been changed remains its initialized value, null. I'd expect this value to be either 'X' or 'O'.\n  \n  */\n  // Opinion: \n\n  /* map-output */\n  const boardLength = 3;\n  const boardRows = [...Array(boardLength).keys()].map(row => {\n    const boardSquares = [...Array(boardLength).keys()].map(col => {\n      const i = boardLength * row + col;\n      return /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[i],\n        onSquareClick: () => handleClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: boardSquares\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this);\n  });\n\n  /* for-loop-output */\n  // const board = [];\n  // let board_index = 0;\n  // for (let i = 0; i < 3; i++) {\n  //   let row = [];\n  //   for (let j = 0; j < 3; j++) {\n  //     row.push(<Square key={board_index} value={squares[board_index]} onSquareClick={() => handleClick(board_index)} />);\n  //     board_index++;\n  //   }\n  //   board.push(<div key={i} className=\"board-row\">{row}</div>);\n  // }\n\n  // console.log(boardRows[0]);\n  // console.log(boardRows[1]);\n  // console.log(board[0]);\n  // console.log(board[1]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), boardRows]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: move == currentMove ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"You are at move #\", move]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 65\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","boardLength","boardRows","Array","keys","map","row","boardSquares","col","_c2","Game","_s","history","setHistory","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","length","jumpTo","nextMove","moves","move","description","_c3","lines","a","b","c","$RefreshReg$"],"sources":["C:/Users/clsno/OneDrive/Desktop/Learn React/Tic Tac Toe/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n// Error: Different output when using map vs for when creating game board.\n// Reproduce: Uncomment code with comment-lable \"for-loop-output\", take a turn in the game. Repeat for comment-label \"map-output\".\n/* Expected behavior: Since the logic of creating the game board is identical using map vs for loops, I'd expect the pieces to\n      update naturally. When using the for loop, however, the game freezes and the React component (specifically, a certain <Square />)\n      whose 'value' prop should have been changed remains its initialized value, null. I'd expect this value to be either 'X' or 'O'.\n\n*/\n// Opinion: \n\n/* map-output */\n  const boardLength = 3\n  const boardRows = [...Array(boardLength).keys()].map((row) => {\n      const boardSquares = [...Array(boardLength).keys()].map((col) => {\n          const i = boardLength*row + col;\n          return (\n              <Square \n              key={i}\n              value={squares[i]}\n              onSquareClick={() => handleClick(i)}\n              />\n          )\n      })\n      return (\n        \n          <div key={row} className=\"board-row\">{boardSquares}</div>\n      )\n  })\n\n/* for-loop-output */\n  // const board = [];\n  // let board_index = 0;\n  // for (let i = 0; i < 3; i++) {\n  //   let row = [];\n  //   for (let j = 0; j < 3; j++) {\n  //     row.push(<Square key={board_index} value={squares[board_index]} onSquareClick={() => handleClick(board_index)} />);\n  //     board_index++;\n  //   }\n  //   board.push(<div key={i} className=\"board-row\">{row}</div>);\n  // }\n\n  // console.log(boardRows[0]);\n  // console.log(boardRows[1]);\n  // console.log(board[0]);\n  // console.log(board[1]);\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {boardRows}\n      {/* {board} */}\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return (\n      <li key={move}>\n        {move == currentMove ? (<>You are at move #{move}</>) : <button onClick={() => jumpTo(move)}>{description}</button>}\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}